/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['geo.js']) {
  _$jscoverage['geo.js'] = [];
  _$jscoverage['geo.js'][9] = 0;
  _$jscoverage['geo.js'][10] = 0;
  _$jscoverage['geo.js'][11] = 0;
  _$jscoverage['geo.js'][14] = 0;
  _$jscoverage['geo.js'][15] = 0;
  _$jscoverage['geo.js'][16] = 0;
  _$jscoverage['geo.js'][17] = 0;
  _$jscoverage['geo.js'][19] = 0;
  _$jscoverage['geo.js'][22] = 0;
  _$jscoverage['geo.js'][26] = 0;
  _$jscoverage['geo.js'][36] = 0;
  _$jscoverage['geo.js'][37] = 0;
  _$jscoverage['geo.js'][38] = 0;
  _$jscoverage['geo.js'][39] = 0;
  _$jscoverage['geo.js'][40] = 0;
  _$jscoverage['geo.js'][43] = 0;
  _$jscoverage['geo.js'][44] = 0;
  _$jscoverage['geo.js'][45] = 0;
  _$jscoverage['geo.js'][46] = 0;
  _$jscoverage['geo.js'][48] = 0;
  _$jscoverage['geo.js'][51] = 0;
  _$jscoverage['geo.js'][52] = 0;
  _$jscoverage['geo.js'][54] = 0;
}
_$jscoverage['geo.js'][9]++;
Monitor.prototype.get_geocity = (function () {
  _$jscoverage['geo.js'][10]++;
  if (typeof this.options.geodat !== "undefined" && this.options.geodata !== null) {
    _$jscoverage['geo.js'][11]++;
    if (path.existsSync(this.options.geodat)) {
      _$jscoverage['geo.js'][14]++;
      try {
        _$jscoverage['geo.js'][15]++;
        var geoip = require("geoip");
        _$jscoverage['geo.js'][16]++;
        var City = geoip.City;
        _$jscoverage['geo.js'][17]++;
        var city = new City(this.options.geodat);
      }
      catch (err) {
        _$jscoverage['geo.js'][19]++;
        return null;
      }
      _$jscoverage['geo.js'][22]++;
      return this.options.geodat;
    }
  }
  _$jscoverage['geo.js'][26]++;
  return null;
});
_$jscoverage['geo.js'][36]++;
Monitor.prototype.geolocate = (function (req, callback) {
  _$jscoverage['geo.js'][37]++;
  var ip_address = req.socket && (req.socket.remoteAddress || (req.socket.socket && req.socket.socket.remoteAddress));
  _$jscoverage['geo.js'][38]++;
  var geodat = this.get_geocity();
  _$jscoverage['geo.js'][39]++;
  if (! geodat) {
    _$jscoverage['geo.js'][40]++;
    return callback("Must configure a geodat file to use Monitor.geolocate()");
  }
  _$jscoverage['geo.js'][43]++;
  try {
    _$jscoverage['geo.js'][44]++;
    var geoip = require("geoip");
    _$jscoverage['geo.js'][45]++;
    var City = geoip.City;
    _$jscoverage['geo.js'][46]++;
    var city = new City(geodat);
  }
  catch (err) {
    _$jscoverage['geo.js'][48]++;
    return callback(err);
  }
  _$jscoverage['geo.js'][51]++;
  city.lookup(ip_address, (function (err, data) {
  _$jscoverage['geo.js'][52]++;
  if (err) {
    _$jscoverage['geo.js'][52]++;
    return callback(err);
  }
  _$jscoverage['geo.js'][54]++;
  callback(null, data);
}));
});
_$jscoverage['geo.js'].source = ["","","// The following functions are deprecated, need refactor:","","","/**"," * Getter for geo dat file"," */","Monitor.prototype.get_geocity = function(){","  if (typeof this.options.geodat !== \"undefined\" &amp;&amp; this.options.geodata !== null) {","    if (path.existsSync(this.options.geodat)){","      ","      // TODO: move this into a loader","      try {","        var geoip = require(\"geoip\"); // requires ","        var City = geoip.City;","        var city = new City(this.options.geodat);","      } catch (err) {","        return null;","      }","      ","      return this.options.geodat;","    }","  }","  ","  return null;","}","","/**"," * Geolocate an incoming request"," *"," * @param {Object} req Express request object"," * @param {Function} callback function to process the result"," * @api public"," */","Monitor.prototype.geolocate = function(req, callback) {","  var ip_address = req.socket &amp;&amp; (req.socket.remoteAddress || (req.socket.socket &amp;&amp; req.socket.socket.remoteAddress));","  var geodat = this.get_geocity();","  if (!geodat) {","    return callback(\"Must configure a geodat file to use Monitor.geolocate()\");","  }","  ","  try {","    var geoip = require(\"geoip\"); // requires libgeoip c module","    var City = geoip.City;","    var city = new City(geodat);","  } catch (err) {","    return callback(err);","  }","  ","  city.lookup(ip_address, function(err, data) {","    if (err) return callback(err);","    ","    callback(null, data);","  });","}"];
