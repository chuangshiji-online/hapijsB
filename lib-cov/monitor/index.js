/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['monitor/index.js']) {
  _$jscoverage['monitor/index.js'] = [];
  _$jscoverage['monitor/index.js'][4] = 0;
  _$jscoverage['monitor/index.js'][5] = 0;
  _$jscoverage['monitor/index.js'][6] = 0;
  _$jscoverage['monitor/index.js'][7] = 0;
  _$jscoverage['monitor/index.js'][8] = 0;
  _$jscoverage['monitor/index.js'][9] = 0;
  _$jscoverage['monitor/index.js'][16] = 0;
  _$jscoverage['monitor/index.js'][18] = 0;
  _$jscoverage['monitor/index.js'][21] = 0;
  _$jscoverage['monitor/index.js'][24] = 0;
  _$jscoverage['monitor/index.js'][28] = 0;
  _$jscoverage['monitor/index.js'][34] = 0;
  _$jscoverage['monitor/index.js'][49] = 0;
  _$jscoverage['monitor/index.js'][50] = 0;
  _$jscoverage['monitor/index.js'][52] = 0;
  _$jscoverage['monitor/index.js'][53] = 0;
  _$jscoverage['monitor/index.js'][56] = 0;
  _$jscoverage['monitor/index.js'][57] = 0;
  _$jscoverage['monitor/index.js'][58] = 0;
  _$jscoverage['monitor/index.js'][60] = 0;
  _$jscoverage['monitor/index.js'][72] = 0;
  _$jscoverage['monitor/index.js'][73] = 0;
  _$jscoverage['monitor/index.js'][76] = 0;
  _$jscoverage['monitor/index.js'][82] = 0;
  _$jscoverage['monitor/index.js'][83] = 0;
  _$jscoverage['monitor/index.js'][84] = 0;
  _$jscoverage['monitor/index.js'][87] = 0;
  _$jscoverage['monitor/index.js'][88] = 0;
  _$jscoverage['monitor/index.js'][91] = 0;
  _$jscoverage['monitor/index.js'][94] = 0;
  _$jscoverage['monitor/index.js'][100] = 0;
  _$jscoverage['monitor/index.js'][101] = 0;
  _$jscoverage['monitor/index.js'][102] = 0;
  _$jscoverage['monitor/index.js'][104] = 0;
  _$jscoverage['monitor/index.js'][105] = 0;
  _$jscoverage['monitor/index.js'][107] = 0;
  _$jscoverage['monitor/index.js'][123] = 0;
  _$jscoverage['monitor/index.js'][128] = 0;
  _$jscoverage['monitor/index.js'][138] = 0;
  _$jscoverage['monitor/index.js'][140] = 0;
  _$jscoverage['monitor/index.js'][142] = 0;
  _$jscoverage['monitor/index.js'][146] = 0;
}
_$jscoverage['monitor/index.js'][4]++;
var child_process = require("child_process");
_$jscoverage['monitor/index.js'][5]++;
var exec = child_process.exec;
_$jscoverage['monitor/index.js'][6]++;
var fs = require("fs");
_$jscoverage['monitor/index.js'][7]++;
var os = require("os");
_$jscoverage['monitor/index.js'][8]++;
var request = require("request");
_$jscoverage['monitor/index.js'][9]++;
var Utils = require("../utils");
_$jscoverage['monitor/index.js'][16]++;
function Monitor(options) {
  _$jscoverage['monitor/index.js'][18]++;
  this.options = Utils.merge({}, this._options, options || {});
  _$jscoverage['monitor/index.js'][21]++;
  this.process = require("./process");
  _$jscoverage['monitor/index.js'][24]++;
  this.os = require("./os");
  _$jscoverage['monitor/index.js'][28]++;
  return this;
}
_$jscoverage['monitor/index.js'][34]++;
Monitor.prototype._options = {outbound: {transport: "http", host: null, interval: 30000}, inbound: {route: "/_monitor/"}, geodat: null};
_$jscoverage['monitor/index.js'][49]++;
Monitor.prototype.logging = (function () {
  _$jscoverage['monitor/index.js'][50]++;
  var client = {};
  _$jscoverage['monitor/index.js'][52]++;
  return (function (req, res, next) {
  _$jscoverage['monitor/index.js'][53]++;
  req._startTime = new Date();
  _$jscoverage['monitor/index.js'][56]++;
  var end = res.end;
  _$jscoverage['monitor/index.js'][57]++;
  res.end = (function (chunk, encoding) {
  _$jscoverage['monitor/index.js'][58]++;
  end(chunk, encoding);
  _$jscoverage['monitor/index.js'][60]++;
  client.write();
});
});
});
_$jscoverage['monitor/index.js'][72]++;
Monitor.prototype.onPreRoute = (function (req, res, next) {
  _$jscoverage['monitor/index.js'][73]++;
  req._startTime = new Date();
  _$jscoverage['monitor/index.js'][76]++;
  next();
});
_$jscoverage['monitor/index.js'][82]++;
Monitor.prototype.onPreHandler = (function () {
  _$jscoverage['monitor/index.js'][83]++;
  var wrapped = (function (req, res, next) {
  _$jscoverage['monitor/index.js'][84]++;
  if (! req._startTime) {
    _$jscoverage['monitor/index.js'][84]++;
    throw "Monitor.onPreHandler middleware requires Monitor.onPreRoute";
  }
  _$jscoverage['monitor/index.js'][87]++;
  for (var i in this.public_methods) {
    _$jscoverage['monitor/index.js'][88]++;
    req[this.public_methods[i]] = this[this.public_methods[i]];
}
  _$jscoverage['monitor/index.js'][91]++;
  next();
});
  _$jscoverage['monitor/index.js'][94]++;
  return wrapped;
});
_$jscoverage['monitor/index.js'][100]++;
Monitor.prototype.onPostHandler = (function () {
  _$jscoverage['monitor/index.js'][101]++;
  var wrapped = (function (req, res, next) {
  _$jscoverage['monitor/index.js'][102]++;
  if (! req._startTime) {
    _$jscoverage['monitor/index.js'][102]++;
    throw "Monitor.onPostHandler middleware requires Monitor.onPreRoute";
  }
  _$jscoverage['monitor/index.js'][104]++;
  try {
    _$jscoverage['monitor/index.js'][105]++;
    var url = decodeURIComponent(req.url);
  }
  catch (e) {
    _$jscoverage['monitor/index.js'][107]++;
    throw e;
  }
  _$jscoverage['monitor/index.js'][123]++;
  next();
});
  _$jscoverage['monitor/index.js'][128]++;
  return wrapped;
});
_$jscoverage['monitor/index.js'][138]++;
Monitor.prototype.responseTime = Monitor.prototype.response_time = (function (req) {
  _$jscoverage['monitor/index.js'][140]++;
  if (! req._startTime) {
    _$jscoverage['monitor/index.js'][140]++;
    return null;
  }
  _$jscoverage['monitor/index.js'][142]++;
  return new Date() - req._startTime;
});
_$jscoverage['monitor/index.js'][146]++;
module.exports = new Monitor();
_$jscoverage['monitor/index.js'].source = ["/**"," * Module dependencies."," */","var child_process = require(\"child_process\");","var exec = child_process.exec","var fs = require(\"fs\");","var os = require(\"os\");","var request = require(\"request\");","var Utils = require(\"../utils\");","","/**"," * Monitor constructor"," *"," * @api public"," */","function Monitor(options) {","  // TODO: enable cross platform support via separate os-specific files","  this.options = Utils.merge({}, this._options, options || {});","  ","  // Load process level fns","  this.process = require('./process');","  ","  // Load OS level fns","  this.os = require(\"./os\");","  ","  // // TODO: Initialize AniviaClient if config has host","  ","  return this;","}","","/**"," * Default options for Monitor"," */","Monitor.prototype._options = {","  outbound: {","    transport: \"http\",","    host: null,","    interval: 30000","  },","  inbound: {","    route: \"/_monitor/\",","  },","  geodat: null","}","","/**"," * Middleware for instrumenting Hapi"," */","Monitor.prototype.logging = function(){","  var client = {}; // TODO: expand","  ","  return function(req, res, next){","    req._startTime = new Date();","    ","    // This override approach taken from senchalabs/connect","    var end = res.end;","    res.end = function(chunk, encoding){","      end(chunk, encoding);","      ","      client.write()","    }","  }","}","","","","","","/**"," * Middleware (early in stack) required for other Monitor middleware to work"," */","Monitor.prototype.onPreRoute = function(req, res, next) {","  req._startTime = new Date; // Used to determine request response time ","  // TODO: warm up cpu poll function?","  ","  next();","}","","/**"," * Middleware to make req[:fn] available to request handlers"," */","Monitor.prototype.onPreHandler = function() {  ","  var wrapped = function(req, res, next) {","    if (!req._startTime) throw \"Monitor.onPreHandler middleware requires Monitor.onPreRoute\"","    ","    // TODO: evaluate this approach vs just exposing Monitor directly","    for(var i in this.public_methods) {","      req[this.public_methods[i]] = this[this.public_methods[i]];","    }","    ","    next();","  }","  ","  return wrapped;","}","","/**"," * Middleware to include /_monitor/:fn routes"," */","Monitor.prototype.onPostHandler = function() {  ","  var wrapped = function(req, res, next) {","    if (!req._startTime) throw \"Monitor.onPostHandler middleware requires Monitor.onPreRoute\"","    ","    try {","      var url = decodeURIComponent(req.url);","    } catch (e) {","      throw e; // TODO: properly respond to error","    }","    ","    // TODO: if route matches this.options.inbound.route + \":fn\", return response","    // var pattern = new RegExp(this.options.inbound.route + \"(\\S+)\");","    // var match = pattern.exec(url);","    // if (match !== null) {","    //   if (match[1] in this.public_methods) {","    //     this[this.public_methods[match[1]]](function(err, response){","    //       // TODO: handle err","          ","    //       // TODO: handle response","    //     })","    //   }","    // }","    ","    next();","  }","  ","  // this.register();","  ","  return wrapped;","}","","","/**"," * Return request response time"," *"," * @api public"," * @param {Object} req Express request object"," */","Monitor.prototype.responseTime =","Monitor.prototype.response_time = function(req) {","  if (!req._startTime) return null;","  ","  return new Date - req._startTime;","}","","// Module exports","module.exports = new Monitor();"];
