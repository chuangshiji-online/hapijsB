/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['client.js']) {
  _$jscoverage['client.js'] = [];
  _$jscoverage['client.js'][4] = 0;
  _$jscoverage['client.js'][5] = 0;
  _$jscoverage['client.js'][6] = 0;
  _$jscoverage['client.js'][7] = 0;
  _$jscoverage['client.js'][8] = 0;
  _$jscoverage['client.js'][9] = 0;
  _$jscoverage['client.js'][11] = 0;
  _$jscoverage['client.js'][12] = 0;
  _$jscoverage['client.js'][15] = 0;
  _$jscoverage['client.js'][16] = 0;
  _$jscoverage['client.js'][19] = 0;
  _$jscoverage['client.js'][22] = 0;
  _$jscoverage['client.js'][32] = 0;
  _$jscoverage['client.js'][36] = 0;
  _$jscoverage['client.js'][37] = 0;
  _$jscoverage['client.js'][38] = 0;
  _$jscoverage['client.js'][44] = 0;
  _$jscoverage['client.js'][51] = 0;
  _$jscoverage['client.js'][52] = 0;
  _$jscoverage['client.js'][53] = 0;
  _$jscoverage['client.js'][56] = 0;
  _$jscoverage['client.js'][57] = 0;
  _$jscoverage['client.js'][62] = 0;
  _$jscoverage['client.js'][63] = 0;
  _$jscoverage['client.js'][64] = 0;
  _$jscoverage['client.js'][65] = 0;
  _$jscoverage['client.js'][68] = 0;
  _$jscoverage['client.js'][71] = 0;
  _$jscoverage['client.js'][72] = 0;
  _$jscoverage['client.js'][73] = 0;
  _$jscoverage['client.js'][74] = 0;
  _$jscoverage['client.js'][77] = 0;
  _$jscoverage['client.js'][80] = 0;
}
_$jscoverage['client.js'][4]++;
var fs = require("fs");
_$jscoverage['client.js'][5]++;
var path = require("path");
_$jscoverage['client.js'][6]++;
var request = require("request");
_$jscoverage['client.js'][7]++;
var querystring = require("querystring");
_$jscoverage['client.js'][8]++;
var url = require("url");
_$jscoverage['client.js'][9]++;
var Utils = require("./utils");
_$jscoverage['client.js'][11]++;
function Client(options) {
  _$jscoverage['client.js'][12]++;
  this.options = Utils.merge({}, this._options, options || {});
  _$jscoverage['client.js'][15]++;
  if (this.options.safe === true) {
    _$jscoverage['client.js'][16]++;
    this.deferred = this.loadDeferred(this.options.deferredPath);
  }
  _$jscoverage['client.js'][19]++;
  return this;
}
_$jscoverage['client.js'][22]++;
Client.prototype._options = {headers: {}, host: null, version: "*", safe: false, deferredPath: "./log/"};
_$jscoverage['client.js'][32]++;
Client.prototype.defer = (function (opts, err) {
});
_$jscoverage['client.js'][36]++;
Client.prototype.request = (function (method, path, options, callback) {
  _$jscoverage['client.js'][37]++;
  var self = this;
  _$jscoverage['client.js'][38]++;
  var opts = {method: method, uri: path.join(this.options.host, path)};
  _$jscoverage['client.js'][44]++;
  Utils.merge(opts, options || {});
  _$jscoverage['client.js'][51]++;
  request(opts, (function (err, res, body) {
  _$jscoverage['client.js'][52]++;
  if (self.options.safe === true && err) {
    _$jscoverage['client.js'][53]++;
    self.defer(opts, err);
  }
  _$jscoverage['client.js'][56]++;
  if (callback) {
    _$jscoverage['client.js'][57]++;
    return callback(err, res, body);
  }
}));
});
_$jscoverage['client.js'][62]++;
Client.prototype.get = (function (path, options, callback) {
  _$jscoverage['client.js'][63]++;
  if (typeof options == "function") {
    _$jscoverage['client.js'][64]++;
    callback = options;
    _$jscoverage['client.js'][65]++;
    options = {};
  }
  _$jscoverage['client.js'][68]++;
  this.request("get", path, options, callback);
});
_$jscoverage['client.js'][71]++;
Client.prototype.post = (function (path, options, callback) {
  _$jscoverage['client.js'][72]++;
  if (typeof options == "function") {
    _$jscoverage['client.js'][73]++;
    callback = options;
    _$jscoverage['client.js'][74]++;
    options = {};
  }
  _$jscoverage['client.js'][77]++;
  this.request("post", path, options, callback);
});
_$jscoverage['client.js'][80]++;
module.exports = Client;
_$jscoverage['client.js'].source = ["/**"," * Module dependencies."," */","var fs = require(\"fs\");","var path = require(\"path\");","var request = require(\"request\");","var querystring = require(\"querystring\");","var url = require(\"url\");","var Utils = require(\"./utils\");","","function Client(options){","  this.options = Utils.merge({}, this._options, options || {});","  ","  // Check for unfinished requests (TODO)","  if (this.options.safe === true){","    this.deferred = this.loadDeferred(this.options.deferredPath);","  }","  ","  return this;","}","","Client.prototype._options = {","  headers: {","    ","  },","  host: null,","  version: \"*\",","  safe: false,","  deferredPath: \"./log/\"","}","","Client.prototype.defer = function(opts, err){","  // TODO: check type of error","}","","Client.prototype.request = function(method, path, options, callback){","  var self = this;","  var opts = {","    method: method,","    uri: path.join(this.options.host, path)","  }","  ","  // Allow user to set additional options","  Utils.merge(opts, options || {});","    ","  // TODO: handle cookies, attachments, etc...","  ","  // TODO: handle error (like this.options.host = null)","  ","  // Try to make request","  request(opts, function(err, res, body){","    if (self.options.safe === true &amp;&amp; err) {","      self.defer(opts, err);","    }","    ","    if (callback) {","      return callback(err, res, body);","    }","  })","}","","Client.prototype.get = function(path, options, callback){","  if (typeof options == \"function\"){","    callback = options;","    options = {}","  }","  ","  this.request('get', path, options, callback);","}","","Client.prototype.post = function(path, options, callback){","  if (typeof options == \"function\"){","    callback = options;","    options = {}","  }","  ","  this.request('post', path, options, callback);","}","","module.exports = Client;"];
